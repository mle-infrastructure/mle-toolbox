from .pbt_logger import PBT_Logger


class SelectionStrategy(object):
    def __init__(self, strategy: str):
        """ Exploitation Strategies for PBT (Jaderberg et al. 17). """
        assert strategy in ["t_test", "truncation",  "binary_tournament"]
        self.strategy = strategy

    def t_test_selection(self, pbt_log: PBT_Logger):
        """
        Uniformly sample other agent in population and compare last
        performances using Welch’s t-test. If sampled agent is better and
        satisfies the t-test, copy it (hyper & weights).
        """
        hyperparams = {}
        ckpt_path = "temp.pt"
        return copy_bool, hyperparams, ckpt_path

    def truncation_selection(self, pbt_log: PBT_Logger):
        """
        Rank all agents in population by episodic reward/performance. If
        current agent is in bottom 20% of population sample another agent
        uniformly from top 20% of population, and copy it (hyper & weights).
        """
        hyperparams = {}
        ckpt_path = "temp.pt"
        return copy_bool, hyperparams, ckpt_path

    def binary_tournament(self, pbt_log: PBT_Logger):
        """
        Each member of population randomly selects another member and copies
        all its parameters (hyper & weights) if other member’s score is better.
        """
        hyperparams = {}
        ckpt_path = "temp.pt"
        returncopy_bool,  hyperparams, ckpt_path

    def select(self, pbt_log: PBT_Logger):
        if self.strategy == "t_test":
            copy_bool, hyperparams, ckpt = self.t_test_selection(pbt_log)
        elif self.strategy == "truncation":
            copy_bool, hyperparams, ckpt = self.truncation_selection(pbt_log)
        elif self.strategy == "binary_tournament":
            copy_bool, hyperparams, ckpt = self.binary_tournament(pbt_log)
        return copy_bool, hyperparams, ckpt
